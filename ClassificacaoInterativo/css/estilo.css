/* 
a organização das cores em tokens iria te ajudar a manter a consistência dos estilos 
e também facilita na hora da manutenção e até mesmo na hora de adicionar novas coisas (ex: theme light)
*/

body {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

/* 
Hoje em dia o @import tem um ótimo suporte.
Ele é uma boa forma de você separar as responsabilidades dos seus estilos.
Por exemplo, aqui você poderia criar uma nova folha de estilo chamada `utils.css` pra alocar
a classe `hide`.

Dica: uma boa forma de aprender novas formas de organizar seu código é lendo códigos alheios.

Alguns frameworks que eu recomendo dar uma lida no código fonte: 
https://github.com/twbs/bootstrap
https://github.com/jgthms/bulma

https://caniuse.com/?search=%40import
https://developer.mozilla.org/en-US/docs/Web/CSS/@import
*/

.hide {
  display: none;
  opacity: 0;
  visibility: hidden;
}

/*Edições do card*/
.cartao {
  width: 420px;
  height: 420px;
  border-radius: 10%;
  background-color: #252d37;
  color: white;
  position: relative;
  display: flex;
  /* No design original o padding me pareceu ser o mesmo nos dois eixos */
  padding: 0px 15px;
}

/* Ids são úteis em alguns cenários, mas pensando em estilos é legal sempre utilizar
seletores que tenham a mesma especificidade, assim você consegue evitar um pouco desse problema.

Aqui, além da ordem que o estilo está escrito na folha em si, tem também o fato do 
seletor de Id ser mais forte que o de classe. 
Isso fez com que na árvore de estilos o `display: none` da classe `.hide` fosse sobrescrito.

https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity
https://specificity.keegan.st/
*/
#card,
#card-2 {
  /* pra centralizar os cards, eles só precisavam de mais espaço.
    Uma forma de obter isso é setando um `height: 100vh` no pai, eai o flex 
    com justify-content e align-items faz o resto do serviço
    */
  margin-top: 10%;
  display: flex;
  justify-content: center;
  align-items: center;
}
/*Itens dentro do card*/
.CirculoIcone {
  height: 60px;
  width: 60px;
  background-color: #344457;
  position: relative;
  border-radius: 100%;
  padding: 20px;
  border: 0px;
  /* 
    No design original eu não consegui identificar uma box-shadow nesse elemento.
    Mas caso tivesse, acho que seria o caso de aplicar um alpha pra obter um box-shadow menos marcado.
   */
  box-shadow: 0 2px 2px black;
}
h1 {
  /* 
    Como no style-guide do challenge eles especificam apenas a Overpass, acho que ela poderia ter sido 
    aplicada pra todos.
*/
  font-family: "Overpass", sans-serif;
  text-align: justify;
}

h6 {
  font-family: "Quicksand", sans-serif;
  color: #959494;
  text-align: justify;
  line-height: 2rem;
  /* Acho que não entendi o uso do padding e margin negativos */
  padding: -55px;
  margin: -15px 0px;
}

/* 
    A ideia de ter uma classe pra criar os espaçamentos internos dos elementos filhos é uma boa ideia 
    pra manter a consistência, mas poderíamos utilizar o seletor de filhos diretos, assim não precisaríamos 
    aplicar a classe a cada um dos elementos
*/
.col-mg {
  padding: 10px 35px;
}

/*botões númericos*/

.form {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(2, 1fr);
  grid-row-gap: 2rem;
}

.form input {
  opacity: 0;
  position: fixed;
  width: 0;
}

/* 
  Sempre que tivermos um elemento em tela, que pode sofrer interações, é legal colocarmos o 'cursor: pointer' 
  Pra que o usuário saiba
*/
.form label {
  display: flex;
  align-items: center;
  justify-content: center;
  /* O height e o width iguais fariam os buttons serem circulos perfeitos */
  height: 60px;
  width: 55px;
  background-color: #344457;
  border-radius: 50%;
  padding: 20px;
  color: #959494;
  border: 0px;
  font-weight: bold;
  box-shadow: 0 2px 2px black;
}

.form input:checked + label {
  background-color: #6a6d71;
  color: white;
  font-weight: bold;
}
.form label:hover {
  background-color: #e68226;
  color: white;
}

button.primeiro {
  margin-left: -36px;
}

/*Botão submit*/
.botao {
  grid-area: 2 / 1 / 3 / 6;
  /* Tamanhos fixos em elementos são evitáveis. Podemos utilizar dos espaçamentos
  internos do pai e alinhamentos do filho pra definir qual será seu tamanho.
  */
  height: 50px;
  width: 355px;
  background-color: #e68226;
  border-radius: 50px 50px 50px 50px;
  border: 0px;
  font-size: 1.2rem;
  text-align: center;
  letter-spacing: 0.2rem;
  color: white;
  box-shadow: 0 2px 2px black;
}

.botao:hover {
  background-color: white;
  color: #e68226;
}

/**** 
CARD DE ENVIO
****/

/*Tela de resultado ao clique*/
#resultado {
  width: 60%;
  margin-left: 20%;
  height: 1.6rem;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 0.6;
  color: #e68226;
  background-color: #333c46;
  border: 0px;
  border-radius: 50px 50px 50px 50px;
  box-shadow: 0px;
}

h1.texto1 {
  align-items: center;
  text-align: center;
}

h6.texto2 {
  text-align: center;
  align-items: center;
}
/*Espaçamento do grid*/
.col-mg.card2 {
  padding: 18px 35px;
}
/*Resultado de seleção alaranjada*/
.resposta {
  color: #e68226;
  margin-bottom: -0.5rem;
  position: absolute;
}
